generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  role              String    @default("user")
  credits           Int       @default(0)
  accounts          Account[]
  sessions          Session[]
  orders            Order[]
  reviews           Review[]

  // Remove updatedAt from automatically managed fields
  createdAt         DateTime  @default(now())

  @@index([email])
}

model Order {
  id                String   @id @default(cuid())
  userId            String
  status            String   @default("pending")
  total             Float
  
  // Stripe Data
  stripeSessionId    String?  @unique
  stripePaymentId    String?  @unique
  
  // Fulfillment Data
  printfulId         String?
  printfulStatus     String?
  
  // Shipping Data
  trackingNumber     String?
  trackingUrl        String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]

  @@index([userId])
  @@index([stripeSessionId])
  @@index([stripePaymentId])
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  inStock     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
  reviews     Review[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}