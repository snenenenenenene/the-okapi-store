generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("subscribed") // subscribed, unsubscribed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  role               String    @default("user")
  credits            Int       @default(0)
  accounts           Account[]
  sessions           Session[]
  orders             Order[]
  orderAssociations  OrderAssociation[]
  reviews            Review[]
  createdAt          DateTime  @default(now())

  @@index([email])
}

model Order {
  id                String    @id @default(cuid())
  userId            String
  status            String    @default("processing")
  subtotal          Float     // Base price before VAT and shipping
  shippingCost      Float     // Shipping cost
  vatAmount         Float     // VAT amount
  total             Float     // Final total including VAT and shipping
  stripeSessionId   String?   @unique
  stripePaymentId   String?   @unique
  printfulId        String?
  printfulStatus    String?
  trackingNumber    String?
  trackingUrl       String?
  shippingName      String?   // Name of the shipping method chosen
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
  associations      OrderAssociation[]
  reviews           Review[]

  @@index([userId])
  @@index([stripeSessionId])
  @@index([stripePaymentId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float   // Base price per item
  name      String  // Item name as shown in checkout
  size      String? // Size if applicable
  
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
}

model OrderAssociation {
  id        String   @id @default(cuid())
  orderId   String
  userId    String
  type      String   
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([orderId, userId])
  @@index([userId])
  @@index([orderId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      @db.SmallInt
  title       String?
  content     String
  productId   String
  variantId   String
  orderId     String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
  @@index([orderId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}